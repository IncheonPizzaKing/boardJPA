# Quest 08. 배포 자동화 하기

## Introduction
* 이번 퀘스트에서는 여러 대의 서버에 자동 배포를 구현하는 방법에 대해 알아보겠습니다.

## Topics
* Systems Manager
* Fargate
* Blue/Green Deployment

## Resources
* [Systems manager](https://aws.amazon.com/ko/systems-manager/)
* [AWS Fargate](https://aws.amazon.com/ko/fargate)
* [Blue-Green Deployment](https://www.redhat.com/ko/topics/devops/what-is-blue-green-deployment)

## Checklist
* AWS의 Systems Manager는 어떤 서비스인가요?
    AWS Systems Manager(구 SSM)는 AWS에서 인프라를 보고 제어하기 위해 사용할 수 있는 AWS 서비스입니다. 
    Systems Manager 콘솔을 사용하여 여러 AWS 서비스의 운영 데이터를 보고 AWS 리소스에서 운영 태스크를 자동화
    Systems Manager는 관리형 노드를 스캔하고 탐지된 정책 위반을 보고하거나 시정 조치를 취해서 보안 및 규정 준수를 유지하는 데 도움

* AWS의 Fargate는 어떤 서비스인가요? 어떤 장점을 가지고 있나요?
    AWS Fargate는 컨테이너에 대한 적정 규모의 온디맨드 컴퓨팅 용량을 제공하는 기술입니다. AWS Fargate를 사용하면 컨테이너를 실행하려면 직접 가상 머신 그룹을 프로비저닝, 구성 또는 크기를 조정할 필요가 없습니다. 따라서 서버 유형을 선택하거나, 노드 그룹을 조정할 시점을 결정하거나, 클러스터 패킹을 최적화할 필요가 없습니다. Fargate에서 시작하는 포드와 Fargate 프로필에서 실행되는 방법을 제어할 수 있습니다. Fargate 프로필은 Amazon EKS 클러스터의 일부로 정의됩니다.

* Blue/Green Deployment라는 것은 어떤 개념일까요?
    Blue-Green 배포는 애플리케이션 또는 마이크로서비스의 이전 버전에 있던 사용자 트래픽을 이전 버전과 거의 동일한 새 버전으로 점진적으로 이전하는 애플리케이션 릴리스 모델입니다. 이때 두 버전 모두 프로덕션 환경에서 실행 상태를 유지합니다.
    이전 버전을 blue 환경으로, 새 버전은 green 환경으로 부를 수 있습니다. 프로덕션 트래픽이 blue에서 green으로 완전히 이전되면 blue는 롤백에 대비하여 대기 상태로 두거나 프로덕션에서 가져온 후 업데이트하여 다음 업데이트의 템플릿으로 삼을 수 있습니다.
    이와 같은 지속적 배포 모델에는 단점이 있습니다. 환경에 따라서는 업타임 요구 사항이 다르거나 blue-green과 같은 CI/CD 프로세스를 제대로 수행할 리소스가 없을 수도 있습니다. 그러나 애플리케이션을 지원하는 기업의 디지털 트랜스포메이션이 본격화되면서 많은 애플리케이션이 이러한 지속적 제공을 지원하도록 진화하고 있습니다.

## Quest
* AWS의 Systems Manager를 이용하여, 로컬 CLI 컨테이너 이미지를 배포하고 리모트 서버에서 그 이미지를 교체하여 띄울 수 있게 해 보세요. 쉘 스크립트 한 개로 이 모든 것이 이루어질 수 있게 하면 가장 좋습니다!
* 이번에는 EC2 대신 Fargate를 이용하여 같은 서비스를 구현해 보세요. 수동으로 배포하려면 어떻게 해야 할까요?
* Fargate에도 처음에 EC2에 한 배포 자동화를 구현해 보세요. 이 역시 쉘 스크립트 한 개로 이 모든 것이 이루어질 수 있게 하면 가장 좋습니다!

## Advanced
* 컨테이너 오케스트레이션이란 무엇일까요? 이를 달성하기 위한 방법으로 Fargate 외에 어떤 수단들이 있을까요?
    애플리케이션을 지원하기 위해 컨테이너를 배포하고 구성하는 것을 컨테이너 오케스트레이션이라고 하며, 컨테이너 오케스트레이션 도구를 통해 수행됩니다. 인기가 높은 오픈 소스 컨테이너 오케스트레이션 도구의 예로는 Kubernetes, Docker Swarm, LXC 등이 있습니다. 
    (https://www.alibabacloud.com/ko/knowledge/what-is-containerization)
    컨테이너 오케스트레이션 비교 : (https://2mukee.tistory.com/221)

* 컨테이너화란?
    컨테이너화는 커널 하나에 격리된 여러 개의 사용자 공간 인스턴스가 포함될 수 있도록 애플리케이션 수준에서 이루어지는 가상화의 일종입니다. 이런 인스턴스를 컨테이너라고 합니다.

* 컨테이너란? 
    컨테이너는 애플리케이션 코드, 런타임, 시스템 도구, 시스템 라이브러리 및 구성을 하나의 인스턴스에 패키징하는 기본적인 방법을 제공합니다. 컨테이너는 하드웨어에 설치된 커널(운영 체제) 하나를 공유합니다.

* 컨테이너를 사용해야 하는 환경?
    빠르게 자주 변경하고 다시 배포해야 하는 거의 모든 애플리케이션이 컨테이너화에 적합합니다. 마이크로서비스 아키텍처를 사용하는 애플리케이션의 경우에도 좋습니다.

